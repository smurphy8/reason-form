// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_chrome_debugger from "bs-platform/lib/es6/caml_chrome_debugger.js";
import * as FormValidation$ReactHooksTemplate from "./FormValidation.bs.js";

function str(prim) {
  return prim;
}

var initialState = /* record */Caml_chrome_debugger.record([
    "username",
    "email",
    "password"
  ], [
    "",
    "",
    ""
  ]);

function reducer(state, action) {
  if (typeof action === "number") {
    return initialState;
  } else {
    switch (action.tag | 0) {
      case 0 : 
          return /* record */Caml_chrome_debugger.record([
                    "username",
                    "email",
                    "password"
                  ], [
                    action[0],
                    state[/* email */1],
                    state[/* password */2]
                  ]);
      case 1 : 
          return /* record */Caml_chrome_debugger.record([
                    "username",
                    "email",
                    "password"
                  ], [
                    state[/* username */0],
                    action[0],
                    state[/* password */2]
                  ]);
      case 2 : 
          return /* record */Caml_chrome_debugger.record([
                    "username",
                    "email",
                    "password"
                  ], [
                    state[/* username */0],
                    state[/* email */1],
                    action[0]
                  ]);
      
    }
  }
}

function useForm(formType, callback) {
  var match = FormValidation$ReactHooksTemplate.useValidation(formType);
  var validate = match[1];
  var formRules = match[0];
  var match$1 = React.useState((function () {
          return false;
        }));
  var setIsValid = match$1[1];
  var valid = match$1[0];
  var match$2 = React.useReducer(reducer, initialState);
  var dispatch = match$2[1];
  var state = match$2[0];
  React.useEffect((function () {
          Curry._1(validate, state);
          if (valid) {
            Curry._1(callback, /* () */0);
            Curry._1(dispatch, /* ResetState */0);
            return undefined;
          }
          
        }), /* tuple */[
        formRules,
        validate
      ]);
  var handleChange = function (evt) {
    evt.persist();
    var match = evt.target.name;
    switch (match) {
      case "email" : 
          return Curry._1(dispatch, /* SetEmail */Caml_chrome_debugger.variant("SetEmail", 1, [evt.target.value]));
      case "password" : 
          return Curry._1(dispatch, /* SetPassword */Caml_chrome_debugger.variant("SetPassword", 2, [evt.target.value]));
      case "username" : 
          return Curry._1(dispatch, /* SetUsername */Caml_chrome_debugger.variant("SetUsername", 0, [evt.target.value]));
      default:
        return /* () */0;
    }
  };
  var handleSubmit = function (evt) {
    evt.preventDefault();
    Curry._1(validate, state);
    return Curry._1(setIsValid, (function (param) {
                  return Belt_Array.every(formRules, (function (rule) {
                                return rule[/* valid */3];
                              }));
                }));
  };
  return /* tuple */[
          state,
          formRules,
          handleChange,
          handleSubmit
        ];
}

function Form$FormErrors(Props) {
  var formRules = Props.formRules;
  return React.createElement("div", undefined, React.createElement("ul", undefined, $$Array.map((function (rule) {
                        var match = rule[/* valid */3];
                        var match$1 = rule[/* valid */3];
                        return React.createElement("li", {
                                    key: String(rule[/* id */0]),
                                    className: match ? "is-success help is-size-6" : "is-danger help is-size-6"
                                  }, React.createElement("i", {
                                        className: match$1 ? "fas fa-check" : "fas fa-times"
                                      }), " ", rule[/* message */2]);
                      }), formRules)));
}

var FormErrors = /* module */Caml_chrome_debugger.localModule(["make"], [Form$FormErrors]);

function Form(Props) {
  var formType = Props.formType;
  var logger = function (param) {
    console.log("Form submitted");
    return /* () */0;
  };
  var match = useForm(formType, logger);
  var handleChange = match[2];
  var formRules = match[1];
  var state = match[0];
  var match$1 = formType === "register";
  return React.createElement("div", {
              className: "section is-fullheight"
            }, React.createElement("div", {
                  className: "container"
                }, React.createElement("div", {
                      className: "column is-4 is-offset-4"
                    }, React.createElement("h1", {
                          className: "is-size-1 has-text-centered is-capitalized"
                        }, formType), React.createElement("br", undefined), formRules.length !== 0 ? React.createElement(Form$FormErrors, {
                            formRules: formRules
                          }) : null, React.createElement("br", undefined), React.createElement("div", {
                          className: "box"
                        }, React.createElement("form", {
                              onSubmit: match[3]
                            }, match$1 ? React.createElement("div", {
                                    className: "field"
                                  }, React.createElement("label", {
                                        className: "label"
                                      }, "Username"), React.createElement("div", {
                                        className: "control"
                                      }, React.createElement("input", {
                                            className: "input",
                                            name: "username",
                                            required: true,
                                            type: "text",
                                            value: state[/* username */0],
                                            onChange: handleChange
                                          }))) : null, React.createElement("div", {
                                  className: "field"
                                }, React.createElement("label", {
                                      className: "label"
                                    }, "Email Address"), React.createElement("div", {
                                      className: "control"
                                    }, React.createElement("input", {
                                          className: "input",
                                          name: "email",
                                          required: true,
                                          type: "email",
                                          value: state[/* email */1],
                                          onChange: handleChange
                                        }))), React.createElement("div", {
                                  className: "field"
                                }, React.createElement("label", {
                                      className: "label"
                                    }, "Password"), React.createElement("div", {
                                      className: "control"
                                    }, React.createElement("input", {
                                          className: "input",
                                          name: "password",
                                          required: true,
                                          type: "password",
                                          value: state[/* password */2],
                                          onChange: handleChange
                                        }))), React.createElement("button", {
                                  className: "button is-block is-info is-fullwidth is-uppercase",
                                  type: "submit"
                                }, formType, React.createElement("br", undefined)))))));
}

var make = Form;

export {
  str ,
  initialState ,
  reducer ,
  useForm ,
  FormErrors ,
  make ,
  
}
/* react Not a pure module */
