// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_chrome_debugger from "bs-platform/lib/es6/caml_chrome_debugger.js";

function str(prim) {
  return prim;
}

var registerFormRules = /* array */[
  /* record */Caml_chrome_debugger.record([
      "id",
      "field",
      "message",
      "valid"
    ], [
      1,
      "username",
      "Username must have at least 5 characters.",
      false
    ]),
  /* record */Caml_chrome_debugger.record([
      "id",
      "field",
      "message",
      "valid"
    ], [
      2,
      "email",
      "Email must have at least 5 characters.",
      false
    ]),
  /* record */Caml_chrome_debugger.record([
      "id",
      "field",
      "message",
      "valid"
    ], [
      3,
      "email",
      "Email must be a valid email address.",
      false
    ]),
  /* record */Caml_chrome_debugger.record([
      "id",
      "field",
      "message",
      "valid"
    ], [
      4,
      "password",
      "Password must have at least 10 characters.",
      false
    ])
];

var loginFormRules = /* array */[
  /* record */Caml_chrome_debugger.record([
      "id",
      "field",
      "message",
      "valid"
    ], [
      1,
      "email",
      "Email is required.",
      false
    ]),
  /* record */Caml_chrome_debugger.record([
      "id",
      "field",
      "message",
      "valid"
    ], [
      2,
      "email",
      "Email must be a valid email address.",
      false
    ]),
  /* record */Caml_chrome_debugger.record([
      "id",
      "field",
      "message",
      "valid"
    ], [
      3,
      "password",
      "Password is required.",
      false
    ])
];

function validateEmail(email) {
  var re = (/^(([^<>()\[\]\.,;:\s@']+(\.[^<>()\[\]\.,;:\s@']+)*)|('.+'))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/);
  return re.test(email);
}

function areAllRulesValid(formRules) {
  return Belt_Array.every(formRules, (function (rule) {
                return rule[/* valid */3];
              }));
}

function registerFormRulesReducer(state, action) {
  switch (action.tag | 0) {
    case 0 : 
        var match = action[0].length >= 4;
        if (match) {
          Caml_array.caml_array_get(state, 0)[/* valid */3] = true;
          return state;
        } else {
          Caml_array.caml_array_get(state, 0)[/* valid */3] = false;
          return state;
        }
    case 1 : 
        var match$1 = action[0].length >= 4;
        if (match$1) {
          Caml_array.caml_array_get(state, 1)[/* valid */3] = true;
          return state;
        } else {
          Caml_array.caml_array_get(state, 1)[/* valid */3] = false;
          return state;
        }
    case 2 : 
        var match$2 = validateEmail(action[0]);
        if (match$2) {
          Caml_array.caml_array_get(state, 2)[/* valid */3] = true;
          return state;
        } else {
          Caml_array.caml_array_get(state, 2)[/* valid */3] = false;
          return state;
        }
    case 3 : 
        var match$3 = action[0].length >= 9;
        if (match$3) {
          Caml_array.caml_array_get(state, 3)[/* valid */3] = true;
          return state;
        } else {
          Caml_array.caml_array_get(state, 3)[/* valid */3] = false;
          return state;
        }
    
  }
}

function loginFormRulesReducer(state, action) {
  switch (action.tag | 0) {
    case 0 : 
        var match = action[0].length !== 0;
        if (match) {
          Caml_array.caml_array_get(state, 0)[/* valid */3] = true;
          return state;
        } else {
          Caml_array.caml_array_get(state, 0)[/* valid */3] = false;
          return state;
        }
    case 1 : 
        var match$1 = validateEmail(action[0]);
        if (match$1) {
          Caml_array.caml_array_get(state, 1)[/* valid */3] = true;
          return state;
        } else {
          Caml_array.caml_array_get(state, 1)[/* valid */3] = false;
          return state;
        }
    case 2 : 
        var match$2 = action[0].length !== 0;
        if (match$2) {
          Caml_array.caml_array_get(state, 2)[/* valid */3] = true;
          return state;
        } else {
          Caml_array.caml_array_get(state, 2)[/* valid */3] = false;
          return state;
        }
    
  }
}

function useValidation(formType) {
  switch (formType) {
    case "login" : 
        var match = React.useReducer(loginFormRulesReducer, loginFormRules);
        var dispatch = match[1];
        var state = match[0];
        var validate = function (param) {
          var email = param[/* email */1];
          Curry._1(dispatch, /* EmailRequired */Caml_chrome_debugger.variant("EmailRequired", 0, [email]));
          Curry._1(dispatch, /* EmailForLoginValid */Caml_chrome_debugger.variant("EmailForLoginValid", 1, [email]));
          return Curry._1(dispatch, /* PasswordRequired */Caml_chrome_debugger.variant("PasswordRequired", 2, [param[/* password */2]]));
        };
        var allValid = Belt_Array.every(state, (function (rule) {
                return rule[/* valid */3];
              }));
        return /* tuple */[
                state,
                validate,
                allValid
              ];
    case "register" : 
        var match$1 = React.useReducer(registerFormRulesReducer, registerFormRules);
        var dispatch$1 = match$1[1];
        var state$1 = match$1[0];
        var validate$1 = function (param) {
          var email = param[/* email */1];
          Curry._1(dispatch$1, /* UsernameLongEnough */Caml_chrome_debugger.variant("UsernameLongEnough", 0, [param[/* username */0]]));
          Curry._1(dispatch$1, /* EmailLongEnough */Caml_chrome_debugger.variant("EmailLongEnough", 1, [email]));
          Curry._1(dispatch$1, /* EmailForRegistrationValid */Caml_chrome_debugger.variant("EmailForRegistrationValid", 2, [email]));
          return Curry._1(dispatch$1, /* PasswordLongEnough */Caml_chrome_debugger.variant("PasswordLongEnough", 3, [param[/* password */2]]));
        };
        var allValid$1 = Belt_Array.every(state$1, (function (rule) {
                return rule[/* valid */3];
              }));
        return /* tuple */[
                state$1,
                validate$1,
                allValid$1
              ];
    default:
      var state$2 = /* array */[];
      var validate$2 = function (param) {
        return /* () */0;
      };
      return /* tuple */[
              state$2,
              validate$2,
              false
            ];
  }
}

var initialState = /* record */Caml_chrome_debugger.record([
    "username",
    "email",
    "password"
  ], [
    "",
    "",
    ""
  ]);

function formReducer(state, action) {
  if (typeof action === "number") {
    return initialState;
  } else {
    switch (action.tag | 0) {
      case 0 : 
          return /* record */Caml_chrome_debugger.record([
                    "username",
                    "email",
                    "password"
                  ], [
                    action[0],
                    state[/* email */1],
                    state[/* password */2]
                  ]);
      case 1 : 
          return /* record */Caml_chrome_debugger.record([
                    "username",
                    "email",
                    "password"
                  ], [
                    state[/* username */0],
                    action[0],
                    state[/* password */2]
                  ]);
      case 2 : 
          return /* record */Caml_chrome_debugger.record([
                    "username",
                    "email",
                    "password"
                  ], [
                    state[/* username */0],
                    state[/* email */1],
                    action[0]
                  ]);
      
    }
  }
}

function useForm(formType, callback) {
  var match = useValidation(formType);
  var allValid = match[2];
  var validate = match[1];
  var match$1 = React.useState((function () {
          return false;
        }));
  var setIsSubmitting = match$1[1];
  var isSubmitting = match$1[0];
  var match$2 = React.useReducer(formReducer, initialState);
  var dispatch = match$2[1];
  var state = match$2[0];
  React.useEffect((function () {
          var match = isSubmitting && allValid;
          if (match) {
            Curry._1(callback, /* () */0);
            Curry._1(dispatch, /* ResetState */0);
            return undefined;
          } else {
            Curry._1(setIsSubmitting, (function (param) {
                    return false;
                  }));
            return undefined;
          }
        }), /* tuple */[
        isSubmitting,
        allValid
      ]);
  var handleChange = function (evt) {
    evt.persist();
    var match = evt.target.name;
    switch (match) {
      case "email" : 
          return Curry._1(dispatch, /* SetEmail */Caml_chrome_debugger.variant("SetEmail", 1, [evt.target.value]));
      case "password" : 
          return Curry._1(dispatch, /* SetPassword */Caml_chrome_debugger.variant("SetPassword", 2, [evt.target.value]));
      case "username" : 
          return Curry._1(dispatch, /* SetUsername */Caml_chrome_debugger.variant("SetUsername", 0, [evt.target.value]));
      default:
        return /* () */0;
    }
  };
  React.useEffect((function () {
          Curry._1(validate, state);
          return undefined;
        }));
  var handleSubmit = function (evt) {
    evt.preventDefault();
    return Curry._1(setIsSubmitting, (function (param) {
                  return true;
                }));
  };
  return /* tuple */[
          state,
          match[0],
          handleChange,
          handleSubmit
        ];
}

export {
  str ,
  registerFormRules ,
  loginFormRules ,
  validateEmail ,
  areAllRulesValid ,
  registerFormRulesReducer ,
  loginFormRulesReducer ,
  useValidation ,
  initialState ,
  formReducer ,
  useForm ,
  
}
/* react Not a pure module */
